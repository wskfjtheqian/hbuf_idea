{
  parserClass="com.hbuf.idea.language.parser.HbufParser"
  parserUtilClass="com.hbuf.idea.language.parser.HbufParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Hbuf"
  psiImplClassSuffix="Impl"
  psiPackage="com.hbuf.idea.language.psi"
  psiImplPackage="com.hbuf.idea.language.psi.impl"

  elementTypeHolderClass="com.hbuf.idea.language.psi.HbufTypes"
  elementTypeClass="com.hbuf.idea.language.psi.HbufElementType"
  tokenTypeClass="com.hbuf.idea.language.psi.HbufTokenType"

  psiImplUtilClass="com.hbuf.idea.language.psi.impl.HbufPisUtilImpl"

  tokens = [
    SPACE = ' '
    ASSIGN = '='
	QUESTION = '?'
	LSS = '<'
	LPAREN  = '('
	LBRACK = '['
	LBRACE = '{'
	COMMA = ','
	GTR = '>'
	RPAREN  = ')'
	RBRACK = ']'
	RBRACE = '}'
	SEMICOLON = ';'
	COLON = ':'

    PACKAGE='package'
    IMPORT='import'
    ENUM='enum'
    SERVER='server'
    DATA='data'
    TYPES='regexp:int8|int16|int32|int64|uint8|uint16|uint32|uint64|bool|float|double|decimal|string|date'

    COMMENT='regexp://.*'
    NUMBER='regexp:\d+(\.\d*)?'
    IDENT='regexp:\p{Alpha}\w*'
    STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  ]
}

hbufFile ::= item_*

private item_ ::= package-statement|import-statement|data-statement|server-statement|enum-statement|IDENT|CRLF

package-statement ::=COMMENT|(PACKAGE IDENT ASSIGN STRING){
    mixin="com.hbuf.idea.language.psi.impl.HbufPackageElementImpl"
    implements="com.hbuf.idea.language.psi.HbufPackageElement"
}

import-statement::=COMMENT|(IMPORT STRING){
    mixin="com.hbuf.idea.language.psi.impl.HbufImportElementImpl"
    implements="com.hbuf.idea.language.psi.HbufImportElement"
}

data-statement::= COMMENT|([annotation-group] DATA ident-name [COLON extends] data-body){
     mixin="com.hbuf.idea.language.psi.impl.HbufDataElementImpl"
     implements="com.hbuf.idea.language.psi.HbufDataElement"
}

ident-name::= IDENT {
     mixin="com.hbuf.idea.language.psi.impl.HbufNameElementImpl"
     implements="com.hbuf.idea.language.psi.HbufNameElement"
}

id::=NUMBER{
    mixin="com.hbuf.idea.language.psi.impl.HbufIdElementImpl"
    implements="com.hbuf.idea.language.psi.HbufIdElement"
}

extends::=ident-name ASSIGN id [COMMA extends ]{
    mixin="com.hbuf.idea.language.psi.impl.HbufExtendsElementImpl"
    implements="com.hbuf.idea.language.psi.HbufExtendsElement"
}

data-body::=LBRACE [data-field-list] RBRACE {
    mixin="com.hbuf.idea.language.psi.impl.HbufDataBodyElementImpl"
    implements="com.hbuf.idea.language.psi.HbufDataBodyElement"
}

data-field-list::= (data-field-statement | IDENT) [data-field-list]{
     mixin="com.hbuf.idea.language.psi.impl.HbufDataFieldsElementImpl"
    implements="com.hbuf.idea.language.psi.HbufDataFieldsElement"
}

data-field-statement::= COMMENT|([annotation-group] type-statement ident-name ASSIGN id){
    mixin="com.hbuf.idea.language.psi.impl.HbufDataFieldElementImpl"
    implements="com.hbuf.idea.language.psi.HbufDataFieldElement"
}

type-base::= (TYPES|ident-name)[QUESTION]{
    mixin="com.hbuf.idea.language.psi.impl.HbufTypeElementImpl"
    implements="com.hbuf.idea.language.psi.HbufTypeElement"
}

type-statement::=type-array|type-map|type-base {
    mixin="com.hbuf.idea.language.psi.impl.HbufFieldTypeElementImpl"
    implements="com.hbuf.idea.language.psi.HbufFieldTypeElement"
}

type-array::=type-base LBRACK RBRACK [QUESTION] {
    mixin="com.hbuf.idea.language.psi.impl.HbufTypeArrayElementImpl"
    implements="com.hbuf.idea.language.psi.HbufTypeArrayElement"
}

type-map::=type-base LSS TYPES GTR [QUESTION]{
    mixin="com.hbuf.idea.language.psi.impl.HbufTypeMapElementImpl"
    implements="com.hbuf.idea.language.psi.HbufTypeMapElement"
}

annotation-group::= annotation [annotation-group] {
    mixin="com.hbuf.idea.language.psi.impl.HbufAnnotationGroupElementImpl"
    implements="com.hbuf.idea.language.psi.HbufAnnotationGroupElement"
}

annotation::=COMMENT|(LBRACK ident-name COLON [annotation-list] RBRACK){
    mixin="com.hbuf.idea.language.psi.impl.HbufAnnotationElementImpl"
    implements="com.hbuf.idea.language.psi.HbufAnnotationElement"
}

annotation-list::= annotation-field [SEMICOLON annotation-list]  {
    mixin="com.hbuf.idea.language.psi.impl.HbufAnnotationListElementImpl"
    implements="com.hbuf.idea.language.psi.HbufAnnotationListElement"
}

annotation-field::= ident-name ASSIGN annotation-values {
    mixin="com.hbuf.idea.language.psi.impl.HbufAnnotationFieldElementImpl"
    implements="com.hbuf.idea.language.psi.HbufAnnotationFieldElement"
}

annotation-values::= STRING [COMMA annotation-values]{
    mixin="com.hbuf.idea.language.psi.impl.HbufAnnotationValuesElementImpl"
    implements="com.hbuf.idea.language.psi.HbufAnnotationValuesElement"
}

server-statement::= COMMENT|([annotation-group] SERVER ident-name [COLON extends]  server-body){
    mixin="com.hbuf.idea.language.psi.impl.HbufServerElementImpl"
    implements="com.hbuf.idea.language.psi.HbufServerElement"
}

server-body::=LBRACE [func-list] RBRACE {
   mixin="com.hbuf.idea.language.psi.impl.HbufServerBodyElementImpl"
   implements="com.hbuf.idea.language.psi.HbufServerBodyElement"
}

func-list::= (func-statement | IDENT) [func-list]{
    mixin="com.hbuf.idea.language.psi.impl.HbufServerFuncsElementImpl"
    implements="com.hbuf.idea.language.psi.HbufServerFuncsElement"
}

func-statement::=COMMENT|([annotation-group] func-type ident-name LPAREN (func-param|IDENT) RPAREN ASSIGN id){
    mixin="com.hbuf.idea.language.psi.impl.HbufServerFuncElementImpl"
    implements="com.hbuf.idea.language.psi.HbufServerFuncElement"
}

func-type::=ident-name | void{
    mixin="com.hbuf.idea.language.psi.impl.HbufFuncTypeElementImpl"
    implements="com.hbuf.idea.language.psi.HbufFuncTypeElement"
}

func-param::= (func-type) ident-name{
    mixin="com.hbuf.idea.language.psi.impl.HbufFuncParamElementImpl"
    implements="com.hbuf.idea.language.psi.HbufFuncParamElement"
}

enum-statement::=COMMENT|([annotation-group] ENUM ident-name enum-body){
    mixin="com.hbuf.idea.language.psi.impl.HbufEnumElementImpl"
    implements="com.hbuf.idea.language.psi.HbufEnumElement"
}

enum-body::=LBRACE [enum-field-list] RBRACE {
    mixin="com.hbuf.idea.language.psi.impl.HbufEnumBodyElementImpl"
    implements="com.hbuf.idea.language.psi.HbufEnumBodyElement"
}

enum-field-list::= enum-field-statement [enum-field-list]{
   mixin="com.hbuf.idea.language.psi.impl.HbufEnumFieldsElementImpl"
   implements="com.hbuf.idea.language.psi.HbufEnumFieldsElement"
}

enum-field-statement::=COMMENT|([annotation-group] ident-name ASSIGN id){
    mixin="com.hbuf.idea.language.psi.impl.HbufEnumFieldElementImpl"
    implements="com.hbuf.idea.language.psi.HbufEnumFieldElement"
}
