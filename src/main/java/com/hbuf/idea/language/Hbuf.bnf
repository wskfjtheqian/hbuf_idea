{
  parserClass="com.hbuf.idea.language.parser.HbufParser"
  parserUtilClass="com.hbuf.idea.language.parser.HbufParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Hbuf"
  psiImplClassSuffix="Impl"
  psiPackage="com.hbuf.idea.language.psi"
  psiImplPackage="com.hbuf.idea.language.psi.impl"

  elementTypeHolderClass="com.hbuf.idea.language.psi.HbufTypes"
  elementTypeClass="com.hbuf.idea.language.psi.HbufElementType"
  tokenTypeClass="com.hbuf.idea.language.psi.HbufTokenType"

  psiImplUtilClass="com.hbuf.idea.language.psi.impl.HbufPsiImplUtil"

  tokens = [
    SPACE = ' '
    ASSIGN = '='
	QUESTION = '?'
	LSS = '<'
	LPAREN  = '('
	LBRACK = '['
	LBRACE = '{'
	COMMA = ','
	GTR = '>'
	RPAREN  = ')'
	RBRACK = ']'
	RBRACE = '}'
	SEMICOLON = ';'
	COLON = ':'

    COMMENT='regexp://.*'
    NUMBER='regexp:\d+(\.\d*)?'
    ID='regexp:\p{Alpha}\w*'
    STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    NUMBER='regexp:\d+(\.\d*)?'
  ]
}

hbufFile ::= item_*

private item_ ::= (package|import|data|server|COMMENT|CRLF)

package ::="package" ID ASSIGN STRING{
    pin=3
    mixin="com.hbuf.idea.language.psi.impl.HbufPackageElementImpl"
    implements="com.hbuf.idea.language.psi.HbufPackageElement"
}

import::="import" STRING {
    pin=3
    mixin="com.hbuf.idea.language.psi.impl.HbufImportElementImpl"
    implements="com.hbuf.idea.language.psi.HbufImportElement"
}

data::= [annotation-group] "data" ID [COLON extends] ASSIGN NUMBER data-body{

}

extends::=ID [COMMA extends]{
}

data-body::=LBRACE [field-list] RBRACE {

}

field-list::= field-statement [field-list]{

}

field-statement::= [annotation-group] type-statement ID ASSIGN NUMBER{}

type-base::= "int8"|"int16"|"int32"|"int64"|"uint8"|"uint16"|"uint32"|"uint64"|"bool"|"float"|"double"|"decimal"|"string"|"date"|ID

type-statement::=type-array|type-map|type-base [QUESTION] {
}

type-array::=type-base [QUESTION] LBRACK RBRACK {}

type-map::=type-base [QUESTION] LSS type-base GTR{}

annotation-group::= annotation [annotation-group] {
}

annotation::=LBRACK ID COLON [annotation-list] RBRACK{
}

annotation-list::= annotation-item [SEMICOLON annotation-list]  {
}

annotation-item::= ID ASSIGN STRING {
}

server::= [annotation-group] "server" ID [COLON extends] ASSIGN NUMBER server-body{

}

server-body::=LBRACE [func-list] RBRACE {
}

func-list::= func-statement [func-list]{
}

func-statement::=[annotation-group] func-type ID LPAREN func-param RPAREN ASSIGN NUMBER{
}

func-type::=ID{}

func-param::= func-type ID{}