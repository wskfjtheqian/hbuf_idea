{
  parserClass="com.hbuf.idea.language.parser.HbufParser"
  parserUtilClass="com.hbuf.idea.language.parser.HbufParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Hbuf"
  psiImplClassSuffix="Impl"
  psiPackage="com.hbuf.idea.language.psi"
  psiImplPackage="com.hbuf.idea.language.psi.impl"

  elementTypeHolderClass="com.hbuf.idea.language.psi.HbufTypes"
  elementTypeClass="com.hbuf.idea.language.psi.HbufElementType"
  tokenTypeClass="com.hbuf.idea.language.psi.HbufTokenType"

  psiImplUtilClass="com.hbuf.idea.language.psi.impl.HbufPsiImplUtil"

  tokens = [
    SPACE = ' '
    ASSIGN = '='
	QUESTION = '?'
	LSS = '<'
	LPAREN  = '('
	LBRACK = '['
	LBRACE = '{'
	COMMA = ','
	GTR = '>'
	RPAREN  = ')'
	RBRACK = ']'
	RBRACE = '}'
	SEMICOLON = ';'
	COLON = ':'
	
    PACKAGE='package'
    IMPORT='import'
    ENUM='enum'
    SERVER='server'
    DATA='data'
    TYPES='regexp:int8|int16|int32|int64|uint8|uint16|uint32|uint64|bool|float|double|decimal|string|date'

    COMMENT='regexp://.*'
    NUMBER='regexp:\d+(\.\d*)?'
    ID='regexp:\p{Alpha}\w*'
    STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
  ]
}

hbufFile ::= item_*

private item_ ::= (package-statement|import-statement|data-statement|server-statement|enum-statement|COMMENT|CRLF)

package-statement ::=PACKAGE ID ASSIGN STRING{
    pin=3
    mixin="com.hbuf.idea.language.psi.impl.HbufPackageElementImpl"
    implements="com.hbuf.idea.language.psi.HbufPackageElement"
}

import-statement::=IMPORT STRING {
    pin=3
    mixin="com.hbuf.idea.language.psi.impl.HbufImportElementImpl"
    implements="com.hbuf.idea.language.psi.HbufImportElement"
}

data-statement::= [annotation-group] DATA ID [COLON extends] ASSIGN NUMBER data-body{
    pin=3
    mixin="com.hbuf.idea.language.psi.impl.HbufDataElementImpl"
    implements="com.hbuf.idea.language.psi.HbufDataElement"
}

extends::=ID [COMMA extends]{
}

data-body::=LBRACE [field-list] RBRACE {
    mixin="com.hbuf.idea.language.psi.impl.HbufDataBodyElementImpl"
    implements="com.hbuf.idea.language.psi.HbufDataBodyElement"
}

field-list::= field-statement [field-list]{

}

field-statement::= [annotation-group] type-statement ID ASSIGN NUMBER{
    mixin="com.hbuf.idea.language.psi.impl.HbufDataFieldElementImpl"
    implements="com.hbuf.idea.language.psi.HbufDataFieldElement"
}

type-base::= TYPES|ID{
    mixin="com.hbuf.idea.language.psi.impl.HbufTypeBaseElementImpl"
    implements="com.hbuf.idea.language.psi.HbufTypeBaseElement"
}

type-statement::=type-array|type-map|type-base [QUESTION] {
    mixin="com.hbuf.idea.language.psi.impl.HbufTypeStatementElementImpl"
    implements="com.hbuf.idea.language.psi.HbufTypeStatementElement"
}

type-array::=type-base [QUESTION] LBRACK RBRACK {
    mixin="com.hbuf.idea.language.psi.impl.HbufTypeArrayElementImpl"
    implements="com.hbuf.idea.language.psi.HbufTypeArrayElement"
}

type-map::=type-base [QUESTION] LSS TYPES GTR{
    mixin="com.hbuf.idea.language.psi.impl.HbufTypeMapElementImpl"
    implements="com.hbuf.idea.language.psi.HbufTypeMapElement"
}

annotation-group::= annotation [annotation-group] {
    mixin="com.hbuf.idea.language.psi.impl.HbufAnnotationGroupElementImpl"
    implements="com.hbuf.idea.language.psi.HbufAnnotationGroupElement"
}

annotation::=LBRACK ID COLON [annotation-list] RBRACK{
}

annotation-list::= annotation-item [SEMICOLON annotation-list]  {
}

annotation-item::= ID ASSIGN STRING {
}

server-statement::= [annotation-group] SERVER ID [COLON extends] ASSIGN NUMBER server-body{
    mixin="com.hbuf.idea.language.psi.impl.HbufServerElementImpl"
    implements="com.hbuf.idea.language.psi.HbufServerElement"
}

server-body::=LBRACE [func-list] RBRACE {
    mixin="com.hbuf.idea.language.psi.impl.HbufServerBodyElementImpl"
    implements="com.hbuf.idea.language.psi.HbufServerBodyElement"
}

func-list::= func-statement [func-list]{
}

func-statement::=[annotation-group] func-type ID LPAREN func-param RPAREN ASSIGN NUMBER{
    mixin="com.hbuf.idea.language.psi.impl.HbufServerFuncElementImpl"
    implements="com.hbuf.idea.language.psi.HbufServerFuncElement"
}

func-type::=ID{
    mixin="com.hbuf.idea.language.psi.impl.HbufFuncTypeElementImpl"
    implements="com.hbuf.idea.language.psi.HbufFuncTypeElement"
}

func-param::= func-type ID{
    mixin="com.hbuf.idea.language.psi.impl.HbufFuncParamElementImpl"
    implements="com.hbuf.idea.language.psi.HbufFuncParamElement"
}

enum-statement::= [annotation-group] ENUM ID enum-body{
    mixin="com.hbuf.idea.language.psi.impl.HbufEnumElementImpl"
    implements="com.hbuf.idea.language.psi.HbufEnumElement"
}

enum-body::=LBRACE [enum-field-list] RBRACE {
    mixin="com.hbuf.idea.language.psi.impl.HbufEnumBodyElementImpl"
    implements="com.hbuf.idea.language.psi.HbufEnumBodyElement"
}

enum-field-list::= enum-field-statement [enum-field-list]{
}

enum-field-statement::= [annotation-group] ID ASSIGN NUMBER{
    mixin="com.hbuf.idea.language.psi.impl.HbufEnumFieldElementImpl"
    implements="com.hbuf.idea.language.psi.HbufEnumFieldElement"
}